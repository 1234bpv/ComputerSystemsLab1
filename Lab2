using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ComputerSystemsLab2
{
    class Program
    {
        static void Main(string[] args)
        {
            string answer;
            do
            {
                Console.WriteLine("Виберiть номер задачi:");
                Console.WriteLine("1) Множення двох 32-бiтних чисел(як є)");
                Console.WriteLine("2) Дiлення двох 32-бiтних чисел (частка й залишок в одному регiстi)");
                Console.WriteLine("3) Додавання чисел з плаваючою комою (IEEE 754) ");
                answer = Console.ReadLine();
            }
            while (answer != "1" && answer != "2" && answer != "3");
            if (answer == "1")
            {
                bool[] Multipler1Bin = new bool[32];
                bool[] Multipler2Bin = new bool[32];
                do
                {
                    Console.WriteLine("Введiть перший множник в бiнарному виглядi");
                }
                while (!ImputBool(Multipler1Bin, false));
                do
                {
                    Console.WriteLine("Введiть другий множник в бiнарному виглядi");
                }
                while (!ImputBool(Multipler2Bin, false));
                bool[] result = multiplication(Multipler1Bin, Multipler2Bin);
                OutputBin(result);
            }
            if (answer == "2")
            {
                bool[] DividedBin = new bool[32];
                bool[] DivierBin = new bool[32];
                do
                {
                    Console.WriteLine("Введiть дiлене в бiнарному виглядi");
                }
                while (!ImputBool(DividedBin, false));
                do
                {
                    Console.WriteLine("Введiть дiльник в бiнарному виглядi");
                }
                while (!ImputBool(DivierBin, false));
                bool[] result = division(DividedBin, DivierBin);
                OutputBin(result);
            }
            if (answer == "3")
            {
                bool[] Conjunction1 = new bool[32];
                bool[] Conjunction2 = new bool[32];
                do
                {
                    Console.WriteLine("Введiть перший доданок в бiнарному виглядi");
                }
                while (!ImputBool(Conjunction1, true));
                do
                {
                    Console.WriteLine("Введiть другий доданок в бiнарному виглядi");
                }
                while (!ImputBool(Conjunction2 , true));
                bool[] result = additionIEEE754(Conjunction1, Conjunction2);
                OutputBin(result);
            }
            else { }
            Console.ReadKey();
        }
        static bool ImputBool(bool[] ImputedBool, bool IsIEEE754)
        {
            bool b = true;
            string Imput = Console.ReadLine();
            char[] ImputElements = Imput.ToCharArray();
            for (int i = 0; i < ImputElements.Length; i++)
            {
                if (ImputElements.Length > 32)
                {
                    b = false;
                    break;
                }
                if (ImputElements[i] == '1')
                {
                    if (IsIEEE754 == false)
                    {
                        ImputedBool[31 - ImputElements.Length + i + 1] = true;
                    }
                    else
                    {
                        ImputedBool[31 - i] = true;
                    }
                }
                else
                {
                    if (ImputElements[i] == '0')
                    { }
                    else
                    {
                        b = false;
                        break;
                    }
                }
            }
            
            return b;
        }
        static bool[] multiplication(bool[] Multipler1Bin, bool[] Multipler2Bin)
        {
            bool[] ResultBin = new bool[64];
            for (int i = 31; i >= 0; i--)// перехід по всім розрядам другого числа
            {
                if (Multipler2Bin[i] == true)//Якщо елемент другого числа що розглядається = 1
                {
                    bool transfer = false;//перенос з попереднього рядка
                    
                    for (int j = 31; j >= 0; j--)// перехід по всім розрядам першого числа
                    {
                        if (Multipler1Bin[j] == true)//Якщо елемет першого числа що розглядається = 1
                        {
                            if (ResultBin[i + j + 1] == true)//Якщо елемет регістру що розглядається = 1
                            {
                                if (transfer == true)
                                { }//вхідні сигнали зберігаються (R(n) = R(n+1); T(n) = T(n+1)
                                else
                                {
                                    ResultBin[i + j + 1] = false;
                                    transfer = true;
                                }
                            }
                            else
                            {
                                if (transfer == true)
                                { }//вхідні сигнали зберігаються (R(n) = R(n+1); T(n) = T(n+1)
                                else
                                {
                                    ResultBin[i + j + 1] = true;
                                    transfer = false;
                                }
                            }
                        }
                        else
                        {
                            if (ResultBin[i + j + 1] == true)
                            {
                                if (transfer == true)
                                {
                                    ResultBin[i + j + 1] = false;
                                }
                                else
                                { }//вхідні сигнали зберігаються (R(n) = R(n+1); T(n) = T(n+1)
                            }
                            else
                            {
                                if (transfer == true)
                                {
                                    ResultBin[i + j + 1] = true;
                                    transfer = false;
                                }//вхідні сигнали зберігаються (R(n) = R(n+1); T(n) = T(n+1)
                                else
                                { }
                            }
                        }
                    }
                    OutputBin(ResultBin);
                }
                else
                { }
            }
            Console.WriteLine();
            return ResultBin;
        }
        static bool[] division(bool[] DividedBin, bool[] DividerBin)
        {
            //перетворюємо формат збереження
            DividedBin = ChangeFormat(DividedBin);
            DividerBin = ChangeFormat(DividerBin);
            bool[] ResultBin = new bool[64];//Регістр, що зберігає залишок від ділення та частку
            int DividedLength = -1;
            int DividerLength = -1;
            for (int i = 31; i >= 0; i--)
            {
                ResultBin[i + 32] = DividedBin[i];//переписуємо ділене в залишок

                if (DividedLength == -1 && DividedBin[i] == true)//Визначаємо довжину діленого
                {
                    DividedLength = i + 1;
                }
                if (DividerLength == -1 && DividerBin[i] == true)//Визначаємо довжину дільника
                {
                    DividerLength = i + 1;
                }
            }
            
            if (DividedLength >= DividerLength)//ділене більше або дорівнює(по розрядам) за дільника
            {
                for (int i = DividerLength; i > 0; i--)
                {
                    DividerBin[i - 1 + DividedLength - DividerLength] = DividerBin[i - 1];//Зміщуємо дільник на стільки, щоб його розрядність співпадала з діленим  
                    DividerBin[i - 1] = false;//та видаляємо незміщену частину дільника
                }
                int shifts = 0;
                do
                {
                    bool b = false;//Визначає, чи ділене більше за зміщений дільник
                    for (int i = DividedLength; i >= 0; i--)//перевіряємо чи дільник менше чи дорівнює діленому
                    {
                        if (i == 0)// дільник == ділене
                        {
                            b = true;
                            break;
                        }
                        if (DividerBin[i - 1] == false && ResultBin[i + 31] == true)// дільник менше діленого
                        {
                            b = true;
                            break;
                        }
                        if (ResultBin[i + 31] == false && DividerBin[i - 1] == true)// дільник більше діленого
                        {
                            break;
                        }
                    }
                    if (b == false)// дільник більше діленого
                    {
                        if (shifts <= DividedLength - DividerLength)//Якщо можна далі зміщувати дільник вправо
                        {
                            for (int k = 0; k <= DividedLength - 1 - shifts; k++)//проводимо зміщення рівно на встановленій довжині дільника
                            {
                                DividerBin[k] = DividerBin[k + 1];//Зміщуємо дільник вправо на один розряд                                
                            }
                        }
                        shifts++;
                    }
                    else
                    {
                        ResultBin[31 - shifts] = true;
                        bool[] BackDividerBin = new bool[32];//Зворотній код дільника
                        for (int i = 0; i <= 31; i++)
                        {
                            BackDividerBin[i] = !DividerBin[i];//обертаємо дільник
                        }
                        bool[] One = new bool[32];
                        One[0] = true;
                        addition(One, BackDividerBin, 0, 0, 32);//Додаємо 1 щоб отримати зворотній код
                        addition(BackDividerBin, ResultBin, 0, 32, 32);//Додаємо зворотній код до результату (віднімаємо)
                    }
                }
                while (shifts <= DividedLength - DividerLength);
                //зміщення частки в кінець
                for (int i = shifts - 1; i >= 0; i--)
                {
                    ResultBin[i] = ResultBin[32 - shifts + i];
                    ResultBin[32 - shifts + i] = false;
                }
                ResultBin = ChangeFormat(ResultBin);
            }
            
            return ResultBin;
        }
        /// <summary>
         /// Додає два числа на певному відрізку і записує результат в друге
         /// </summary>
         /// <param name="Conjunction1"></param>
         /// <param name="Conjunction2"></param>
         /// <param name="start1"></param>
         /// <param name="start2"></param>
         /// <param name="end1"></param>
         /// <param name="end2"></param>
         /// <returns></returns>
        static bool addition(bool[] Conjunction1, bool[] Conjunction2, int start1, int start2, int length)
        {
            bool transfer = false;
            for (int i = 0; i < length; i++)
            {
                if (Conjunction1[i + start1] == true)//Якщо елемет першого числа що розглядається = 1
                {
                    if (Conjunction2[i + start2] == true)//Якщо елемет другого числа що розглядається = 1
                    {
                        if (transfer == true)
                        { }//вхідні сигнали зберігаються (R(n) = R(n+1); T(n) = T(n+1)
                        else
                        {
                            Conjunction2[i + start2] = false;
                            transfer = true;
                        }
                    }
                    else
                    {
                        if (transfer == true)
                        { }//вхідні сигнали зберігаються (R(n) = R(n+1); T(n) = T(n+1)
                        else
                        {
                            Conjunction2[i + start2] = true;
                            transfer = false;
                        }
                    }
                }
                else
                {
                    if (Conjunction2[i + start2] == true)
                    {
                        if (transfer == true)
                        {
                            Conjunction2[i + start2] = false;
                        }
                        else
                        { }//вхідні сигнали зберігаються (R(n) = R(n+1); T(n) = T(n+1)
                    }
                    else
                    {
                        if (transfer == true)
                        {
                            Conjunction2[i + start2] = true;
                            transfer = false;
                        }//вхідні сигнали зберігаються (R(n) = R(n+1); T(n) = T(n+1)
                        else
                        { }
                    }
                }
            }
            return transfer;
        }
        /// <summary>
        /// Додає числа представлені в форматі IEEE 754 
        /// </summary>
        /// <param name="Conjunction1"></param>
        /// <param name="Conjunction2"></param>
        /// <returns></returns>
        static bool[] additionIEEE754(bool[] Conjunction1, bool[] Conjunction2)
        {
            //В данному випадку потрібно міняти формат збереження
            if (Conjunction1[31] == false && Conjunction2[31] == false || Conjunction1[31] == true && Conjunction2[31] == true)//Якщо числа мають однаковий знак
            {
                int b = IsEqualMoreLess(Conjunction1, Conjunction2, 30, 30, 8, true);//визначає співвідношення порядків
                bool[] One = new bool[32];
                One[23] = true;//число з порядком 1
                if (b == 1)//Якщо порядок першого доданку більший за порядок другого, вирівнюємо порядок другого поки порядки обох чисел не стануть однаковими
                {
                    int i = 0;//рахує кількість проходів
                    do
                    {
                        i++;
                        Shift(Conjunction2, 0, 22, false);//Зміщуємо область (0 - 22) вправо
                        addition(One, Conjunction2, 23, 23, 8);//Збільшуємо порядок на 1
                        if (i == 1)
                        {
                            Conjunction2[22] = true;//Додаємо приховану одиницю після першого зміщення
                        }
                    }
                    while (IsEqualMoreLess(Conjunction1, Conjunction2, 30, 30, 8, true) != 0);
                }
                if (b == 2)//Якщо порядок другого доданку більший за порядок першого, вирівнюємо порядок першого поки порядки обох чисел не стануть однаковими
                {
                    int i = 0;//рахує кількість проходів
                    do
                    {
                        i++;
                        Shift(Conjunction1, 0, 22, false);//Зміщуємо область (0 - 22) вправо
                        addition(One, Conjunction1, 23, 23, 8);//Збільшуємо порядок на 1
                        if (i == 1)
                        {
                            Conjunction1[22] = true;//Додаємо приховану одиницю після першого зміщення
                        }
                    }
                    while (IsEqualMoreLess(Conjunction1, Conjunction2, 30, 30, 8, true) != 0);
                }
                OutputBin(ChangeFormat(Conjunction2));
                bool c = addition(Conjunction1, Conjunction2, 0, 0, 23);//Додаємо два числа, дізнаємось, чи відбувся перенос
                OutputBin(ChangeFormat(Conjunction2));
                if (c == true && b == 0)//Коли є залишок при додаванні двох чисел та числа однакового порядку
                {
                    Shift(Conjunction2, 0, 22, false);//Зміщуємо область (0 - 22) вправо
                    addition(One, Conjunction2, 23, 23, 8);//Збільшуємо порядок на 1
                    Conjunction2[22] = true;//Додаємо  одиницю в старший розряд
                }
                if (c == true && b != 0)//Коли є залишок при додаванні двох чисел та числа різного порядку
                {
                    Shift(Conjunction2, 0, 22, false);//Зміщуємо область (0 - 22) вправо
                    addition(One, Conjunction2, 23, 23, 8);//Збільшуємо порядок на 1
                }
                if (c != true && b == 0)//Коли нема залишок при додаванні двох чисел та числа однакового порядку
                {
                    Shift(Conjunction2, 0, 22, false);//Зміщуємо область (0 - 22) вправо
                    addition(One, Conjunction2, 23, 23, 8);//Збільшуємо порядок на 1
                }
            }
            Conjunction2 = ChangeFormat(Conjunction2);
            return Conjunction2;
        }
        /// <summary>
        /// Зміщує певну область числа в вибрану сторону (side == true - зміщення вліво, при зміщені вліво задаємо лівий край)
        /// </summary>
        /// <param name="Bin"></param>
        /// <param name="start"></param>
        /// <param name="length"></param>
        /// <param name="side"></param>
        /// <returns></returns>
        static bool Shift(bool[] Bin, int start, int length, bool side)
        {
            bool result = false;
            if (Bin[start] == true)
            {
                result = true;
            }
            if(side == true)
            {
                for (int i = length; i > 0; i--)
                {
                    Bin[start + i - length] = Bin[start + i - length - 1];
                }
            }
            else
            {
                for (int i = length; i > 0; i--)
                {
                    Bin[start - i + length] = Bin[start - i + length + 1];
                }
            }
            Bin[start + length] = false;
            return result;
        }
        /// <summary>
        /// Порівнює два числа напевному проміжку, повертає 0 - перше число == друге, 1 - перше число > друге, 2 - перше число < друге
        /// </summary>
        /// <param name="Bin1"></param>
        /// <param name="Bin2"></param>
        static int IsEqualMoreLess(bool[] Bin1, bool[] Bin2, int start1, int start2, int length, bool order)
        {
            int b = -1;
            if (order == true)//Правлильний порядок - від більшого до меншого
            {
                for (int i = length; i > 0; i--)//перевіряємо чи перше число == друге
                {
                    
                    if (Bin1[start1 + i - length] == false && Bin2[start2 + i - length] == true)//  перше число < друге
                    {
                        b = 2;
                        break;
                    }
                    if (Bin2[start2 + i - length] == false && Bin1[start1 + i - length] == true)// перше число > друге
                    {
                        b = 1;
                        break;
                    }
                    if (i == 1)// перше число == друге
                    {
                        b = 0;
                        break;
                    }
                }
            }
            else
            {
                for (int i = length; i > 0; i--)//перевіряємо чи перше число == друге
                {
                    if (i == 0)// перше число == друге
                    {
                        b = 0;
                        break;
                    }
                    if (Bin1[start1 - i + length] == false && Bin2[start2 - i + length] == true)//  перше число > друге
                    {
                        b = 1;
                        break;
                    }
                    if (Bin2[start2 - i + length] == false && Bin1[start1 - i + length] == true)// перше число < друге
                    {
                        b = 2;
                        break;
                    }
                }
            }
            return b;
        }
        static void OutputBin(bool[] Bin)
        {
            for (int i = 0; i < Bin.Length; i++)
            {
                if (Bin[i])
                {
                    Console.Write("1");
                }
                else
                {
                    Console.Write("0");
                }
            }
            Console.WriteLine();
        }
        static bool[] ChangeFormat(bool[] Bin)
        {
            bool[] AdditionalBin = new bool[Bin.Length];
            for (int i = 0; i < Bin.Length; i++)
            {
                AdditionalBin[Bin.Length - i - 1] = Bin[i];
            }
            return AdditionalBin;
        }
    }
}
